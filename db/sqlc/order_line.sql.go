// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: order_line.sql

package db

import (
	"context"
)

const createOrderLine = `-- name: CreateOrderLine :one
INSERT INTO order_line (
  order_id, book_id ,price
) VALUES (
  $1, $2,$3
)
RETURNING line_id, order_id, book_id, price
`

type CreateOrderLineParams struct {
	OrderID int32 `json:"order_id"`
	BookID  int32 `json:"book_id"`
	Price   int32 `json:"price"`
}

func (q *Queries) CreateOrderLine(ctx context.Context, arg CreateOrderLineParams) (OrderLine, error) {
	row := q.db.QueryRow(ctx, createOrderLine, arg.OrderID, arg.BookID, arg.Price)
	var i OrderLine
	err := row.Scan(
		&i.LineID,
		&i.OrderID,
		&i.BookID,
		&i.Price,
	)
	return i, err
}

const deleteOrderLine = `-- name: DeleteOrderLine :exec
DELETE FROM order_line WHERE line_id = $1
`

func (q *Queries) DeleteOrderLine(ctx context.Context, lineID int32) error {
	_, err := q.db.Exec(ctx, deleteOrderLine, lineID)
	return err
}

const getOrderLine = `-- name: GetOrderLine :one
SELECT line_id, order_id, book_id, price FROM order_line
WHERE line_id = $1 LIMIT 1
`

func (q *Queries) GetOrderLine(ctx context.Context, lineID int32) (OrderLine, error) {
	row := q.db.QueryRow(ctx, getOrderLine, lineID)
	var i OrderLine
	err := row.Scan(
		&i.LineID,
		&i.OrderID,
		&i.BookID,
		&i.Price,
	)
	return i, err
}

const listOrderLines = `-- name: ListOrderLines :many
SELECT line_id, order_id, book_id, price FROM order_line
ORDER BY line_id
`

func (q *Queries) ListOrderLines(ctx context.Context) ([]OrderLine, error) {
	rows, err := q.db.Query(ctx, listOrderLines)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OrderLine{}
	for rows.Next() {
		var i OrderLine
		if err := rows.Scan(
			&i.LineID,
			&i.OrderID,
			&i.BookID,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderLine = `-- name: UpdateOrderLine :one
UPDATE order_line SET order_id = $2 , book_id = $3 , price = $4 
WHERE line_id = $1
RETURNING line_id, order_id, book_id, price
`

type UpdateOrderLineParams struct {
	LineID  int32 `json:"line_id"`
	OrderID int32 `json:"order_id"`
	BookID  int32 `json:"book_id"`
	Price   int32 `json:"price"`
}

func (q *Queries) UpdateOrderLine(ctx context.Context, arg UpdateOrderLineParams) (OrderLine, error) {
	row := q.db.QueryRow(ctx, updateOrderLine,
		arg.LineID,
		arg.OrderID,
		arg.BookID,
		arg.Price,
	)
	var i OrderLine
	err := row.Scan(
		&i.LineID,
		&i.OrderID,
		&i.BookID,
		&i.Price,
	)
	return i, err
}
