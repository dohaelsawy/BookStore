// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: customer_order.sql

package db

import (
	"context"
)

const createCustomerOrder = `-- name: CreateCustomerOrder :one
INSERT INTO customer_order (
  order_date, customer_id ,shipping_method_id
) VALUES (
  $1, $2,$3
)
RETURNING customer_order_id, order_date, customer_id, shipping_method_id
`

type CreateCustomerOrderParams struct {
	OrderDate        string `json:"order_date"`
	CustomerID       int32  `json:"customer_id"`
	ShippingMethodID int32  `json:"shipping_method_id"`
}

func (q *Queries) CreateCustomerOrder(ctx context.Context, arg CreateCustomerOrderParams) (CustomerOrder, error) {
	row := q.db.QueryRow(ctx, createCustomerOrder, arg.OrderDate, arg.CustomerID, arg.ShippingMethodID)
	var i CustomerOrder
	err := row.Scan(
		&i.CustomerOrderID,
		&i.OrderDate,
		&i.CustomerID,
		&i.ShippingMethodID,
	)
	return i, err
}

const deleteCustomerOrder = `-- name: DeleteCustomerOrder :exec
DELETE FROM customer_order WHERE customer_order_id = $1
`

func (q *Queries) DeleteCustomerOrder(ctx context.Context, customerOrderID int32) error {
	_, err := q.db.Exec(ctx, deleteCustomerOrder, customerOrderID)
	return err
}

const getOrder = `-- name: GetOrder :one
SELECT customer_order_id, order_date, customer_id, shipping_method_id FROM customer_order
WHERE customer_order_id = $1 LIMIT 1
`

func (q *Queries) GetOrder(ctx context.Context, customerOrderID int32) (CustomerOrder, error) {
	row := q.db.QueryRow(ctx, getOrder, customerOrderID)
	var i CustomerOrder
	err := row.Scan(
		&i.CustomerOrderID,
		&i.OrderDate,
		&i.CustomerID,
		&i.ShippingMethodID,
	)
	return i, err
}

const listCustomerOrder = `-- name: ListCustomerOrder :many
SELECT customer_order_id, order_date, customer_id, shipping_method_id FROM customer_order
ORDER BY customer_order_id
`

func (q *Queries) ListCustomerOrder(ctx context.Context) ([]CustomerOrder, error) {
	rows, err := q.db.Query(ctx, listCustomerOrder)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CustomerOrder{}
	for rows.Next() {
		var i CustomerOrder
		if err := rows.Scan(
			&i.CustomerOrderID,
			&i.OrderDate,
			&i.CustomerID,
			&i.ShippingMethodID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCustomerOrder = `-- name: UpdateCustomerOrder :one
UPDATE customer_order SET order_date = $2 , customer_id = $3 , shipping_method_id = $4 
WHERE customer_order_id = $1
RETURNING customer_order_id, order_date, customer_id, shipping_method_id
`

type UpdateCustomerOrderParams struct {
	CustomerOrderID  int32  `json:"customer_order_id"`
	OrderDate        string `json:"order_date"`
	CustomerID       int32  `json:"customer_id"`
	ShippingMethodID int32  `json:"shipping_method_id"`
}

func (q *Queries) UpdateCustomerOrder(ctx context.Context, arg UpdateCustomerOrderParams) (CustomerOrder, error) {
	row := q.db.QueryRow(ctx, updateCustomerOrder,
		arg.CustomerOrderID,
		arg.OrderDate,
		arg.CustomerID,
		arg.ShippingMethodID,
	)
	var i CustomerOrder
	err := row.Scan(
		&i.CustomerOrderID,
		&i.OrderDate,
		&i.CustomerID,
		&i.ShippingMethodID,
	)
	return i, err
}
