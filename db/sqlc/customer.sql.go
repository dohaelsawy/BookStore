// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: customer.sql

package db

import (
	"context"
)

const createcustomer = `-- name: Createcustomer :one
INSERT INTO customer (
  first_name, last_name ,email ,password ,city,phone_number
) VALUES (
  $1, $2,$3,$4,$5,$6
)
RETURNING customer_id, first_name, last_name, email, password, city, phone_number
`

type CreatecustomerParams struct {
	FirstName   string `json:"first_name"`
	LastName    string `json:"last_name"`
	Email       string `json:"email"`
	Password    string `json:"password"`
	City        string `json:"city"`
	PhoneNumber string `json:"phone_number"`
}

func (q *Queries) Createcustomer(ctx context.Context, arg CreatecustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, createcustomer,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Password,
		arg.City,
		arg.PhoneNumber,
	)
	var i Customer
	err := row.Scan(
		&i.CustomerID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.City,
		&i.PhoneNumber,
	)
	return i, err
}

const deletecustomer = `-- name: Deletecustomer :exec
DELETE FROM customer WHERE customer_id = $1
`

func (q *Queries) Deletecustomer(ctx context.Context, customerID int32) error {
	_, err := q.db.Exec(ctx, deletecustomer, customerID)
	return err
}

const getCustomer = `-- name: GetCustomer :one
SELECT customer_id, first_name, last_name, email, password, city, phone_number FROM customer
WHERE customer_id = $1 LIMIT 1
`

func (q *Queries) GetCustomer(ctx context.Context, customerID int32) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomer, customerID)
	var i Customer
	err := row.Scan(
		&i.CustomerID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.City,
		&i.PhoneNumber,
	)
	return i, err
}

const listCustomers = `-- name: ListCustomers :many
SELECT customer_id, first_name, last_name, email, password, city, phone_number FROM customer
ORDER BY customer_id
`

func (q *Queries) ListCustomers(ctx context.Context) ([]Customer, error) {
	rows, err := q.db.Query(ctx, listCustomers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Customer{}
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.CustomerID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.Password,
			&i.City,
			&i.PhoneNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatecustomer = `-- name: Updatecustomer :one
UPDATE customer SET first_name = $2 , last_name = $3 , email = $4 , password=$5 , city = $6 , phone_number = $7
WHERE customer_id = $1
RETURNING customer_id, first_name, last_name, email, password, city, phone_number
`

type UpdatecustomerParams struct {
	CustomerID  int32  `json:"customer_id"`
	FirstName   string `json:"first_name"`
	LastName    string `json:"last_name"`
	Email       string `json:"email"`
	Password    string `json:"password"`
	City        string `json:"city"`
	PhoneNumber string `json:"phone_number"`
}

func (q *Queries) Updatecustomer(ctx context.Context, arg UpdatecustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, updatecustomer,
		arg.CustomerID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Password,
		arg.City,
		arg.PhoneNumber,
	)
	var i Customer
	err := row.Scan(
		&i.CustomerID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.City,
		&i.PhoneNumber,
	)
	return i, err
}
