// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: ShippingMehods.sql

package db

import (
	"context"
)

const createShippingMehod = `-- name: CreateShippingMehod :one
INSERT INTO shipping_method (
  name, cost
) VALUES (
  $1, $2
)
RETURNING shipping_method_id, name, cost
`

type CreateShippingMehodParams struct {
	Name string `json:"name"`
	Cost int32  `json:"cost"`
}

func (q *Queries) CreateShippingMehod(ctx context.Context, arg CreateShippingMehodParams) (ShippingMethod, error) {
	row := q.db.QueryRow(ctx, createShippingMehod, arg.Name, arg.Cost)
	var i ShippingMethod
	err := row.Scan(&i.ShippingMethodID, &i.Name, &i.Cost)
	return i, err
}

const deleteShippingMethod = `-- name: DeleteShippingMethod :exec
DELETE FROM shipping_method WHERE shipping_method_id = $1
`

func (q *Queries) DeleteShippingMethod(ctx context.Context, shippingMethodID int32) error {
	_, err := q.db.Exec(ctx, deleteShippingMethod, shippingMethodID)
	return err
}

const getShippingMehod = `-- name: GetShippingMehod :one
SELECT shipping_method_id, name, cost FROM shipping_method
WHERE shipping_method_id = $1 LIMIT 1
`

func (q *Queries) GetShippingMehod(ctx context.Context, shippingMethodID int32) (ShippingMethod, error) {
	row := q.db.QueryRow(ctx, getShippingMehod, shippingMethodID)
	var i ShippingMethod
	err := row.Scan(&i.ShippingMethodID, &i.Name, &i.Cost)
	return i, err
}

const listShippingMthods = `-- name: ListShippingMthods :many
SELECT shipping_method_id, name, cost FROM shipping_method
ORDER BY shipping_method_id
`

func (q *Queries) ListShippingMthods(ctx context.Context) ([]ShippingMethod, error) {
	rows, err := q.db.Query(ctx, listShippingMthods)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ShippingMethod{}
	for rows.Next() {
		var i ShippingMethod
		if err := rows.Scan(&i.ShippingMethodID, &i.Name, &i.Cost); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateShippingMehod = `-- name: UpdateShippingMehod :one
UPDATE shipping_method SET name = $2 , cost = $3
WHERE shipping_method_id = $1
RETURNING shipping_method_id, name, cost
`

type UpdateShippingMehodParams struct {
	ShippingMethodID int32  `json:"shipping_method_id"`
	Name             string `json:"name"`
	Cost             int32  `json:"cost"`
}

func (q *Queries) UpdateShippingMehod(ctx context.Context, arg UpdateShippingMehodParams) (ShippingMethod, error) {
	row := q.db.QueryRow(ctx, updateShippingMehod, arg.ShippingMethodID, arg.Name, arg.Cost)
	var i ShippingMethod
	err := row.Scan(&i.ShippingMethodID, &i.Name, &i.Cost)
	return i, err
}
