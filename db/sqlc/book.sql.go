// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: book.sql

package db

import (
	"context"
)

const createBook = `-- name: CreateBook :one
INSERT INTO book (
  name, publish_date ,price ,sku ,description
) VALUES (
  $1, $2,$3,$4,$5
)
RETURNING book_id, name, publish_date, price, sku, description, created_at, updated_at
`

type CreateBookParams struct {
	Name        string `json:"name"`
	PublishDate string `json:"publish_date"`
	Price       int32  `json:"price"`
	Sku         string `json:"sku"`
	Description string `json:"description"`
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRow(ctx, createBook,
		arg.Name,
		arg.PublishDate,
		arg.Price,
		arg.Sku,
		arg.Description,
	)
	var i Book
	err := row.Scan(
		&i.BookID,
		&i.Name,
		&i.PublishDate,
		&i.Price,
		&i.Sku,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteBook = `-- name: DeleteBook :exec
DELETE FROM book WHERE book_id = $1
`

func (q *Queries) DeleteBook(ctx context.Context, bookID int32) error {
	_, err := q.db.Exec(ctx, deleteBook, bookID)
	return err
}

const getBook = `-- name: GetBook :one
SELECT book_id, name, publish_date, price, sku, description, created_at, updated_at FROM book
WHERE book_id = $1 LIMIT 1
`

func (q *Queries) GetBook(ctx context.Context, bookID int32) (Book, error) {
	row := q.db.QueryRow(ctx, getBook, bookID)
	var i Book
	err := row.Scan(
		&i.BookID,
		&i.Name,
		&i.PublishDate,
		&i.Price,
		&i.Sku,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listBooks = `-- name: ListBooks :many
SELECT book_id, name, publish_date, price, sku, description, created_at, updated_at FROM book
ORDER BY book_id
`

func (q *Queries) ListBooks(ctx context.Context) ([]Book, error) {
	rows, err := q.db.Query(ctx, listBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Book{}
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.BookID,
			&i.Name,
			&i.PublishDate,
			&i.Price,
			&i.Sku,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBook = `-- name: UpdateBook :one
UPDATE book SET name = $2 , publish_date = $3 , price = $4 , sku=$5 , description = $6
WHERE book_id = $1
RETURNING book_id, name, publish_date, price, sku, description, created_at, updated_at
`

type UpdateBookParams struct {
	BookID      int32  `json:"book_id"`
	Name        string `json:"name"`
	PublishDate string `json:"publish_date"`
	Price       int32  `json:"price"`
	Sku         string `json:"sku"`
	Description string `json:"description"`
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) (Book, error) {
	row := q.db.QueryRow(ctx, updateBook,
		arg.BookID,
		arg.Name,
		arg.PublishDate,
		arg.Price,
		arg.Sku,
		arg.Description,
	)
	var i Book
	err := row.Scan(
		&i.BookID,
		&i.Name,
		&i.PublishDate,
		&i.Price,
		&i.Sku,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
