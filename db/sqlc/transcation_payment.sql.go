// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: transcation_payment.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPaymentTranscation = `-- name: CreatePaymentTranscation :one
INSERT INTO transaction_payment (
  amount, line_id ,shipping_method_id ,card_number ,expiration_date ,cvv ,status ,customer_id
) VALUES (
  $1, $2,$3,$4,$5,$6,$7,$8
)
RETURNING transaction_id, amount, line_id, shipping_method_id, card_number, expiration_date, cvv, status, customer_id
`

type CreatePaymentTranscationParams struct {
	Amount           int32       `json:"amount"`
	LineID           int32       `json:"line_id"`
	ShippingMethodID int32       `json:"shipping_method_id"`
	CardNumber       int32       `json:"card_number"`
	ExpirationDate   pgtype.Date `json:"expiration_date"`
	Cvv              string      `json:"cvv"`
	Status           string      `json:"status"`
	CustomerID       int32       `json:"customer_id"`
}

func (q *Queries) CreatePaymentTranscation(ctx context.Context, arg CreatePaymentTranscationParams) (TransactionPayment, error) {
	row := q.db.QueryRow(ctx, createPaymentTranscation,
		arg.Amount,
		arg.LineID,
		arg.ShippingMethodID,
		arg.CardNumber,
		arg.ExpirationDate,
		arg.Cvv,
		arg.Status,
		arg.CustomerID,
	)
	var i TransactionPayment
	err := row.Scan(
		&i.TransactionID,
		&i.Amount,
		&i.LineID,
		&i.ShippingMethodID,
		&i.CardNumber,
		&i.ExpirationDate,
		&i.Cvv,
		&i.Status,
		&i.CustomerID,
	)
	return i, err
}

const deletePaymentTranscation = `-- name: DeletePaymentTranscation :exec
DELETE FROM transaction_payment WHERE transaction_id = $1
`

func (q *Queries) DeletePaymentTranscation(ctx context.Context, transactionID int32) error {
	_, err := q.db.Exec(ctx, deletePaymentTranscation, transactionID)
	return err
}

const getPaymentTransaction = `-- name: GetPaymentTransaction :one
SELECT transaction_id, amount, line_id, shipping_method_id, card_number, expiration_date, cvv, status, customer_id FROM transaction_payment
WHERE transaction_id = $1 LIMIT 1
`

func (q *Queries) GetPaymentTransaction(ctx context.Context, transactionID int32) (TransactionPayment, error) {
	row := q.db.QueryRow(ctx, getPaymentTransaction, transactionID)
	var i TransactionPayment
	err := row.Scan(
		&i.TransactionID,
		&i.Amount,
		&i.LineID,
		&i.ShippingMethodID,
		&i.CardNumber,
		&i.ExpirationDate,
		&i.Cvv,
		&i.Status,
		&i.CustomerID,
	)
	return i, err
}

const listPaymentTranscation = `-- name: ListPaymentTranscation :many
SELECT transaction_id, amount, line_id, shipping_method_id, card_number, expiration_date, cvv, status, customer_id FROM transaction_payment
ORDER BY transaction_id
`

func (q *Queries) ListPaymentTranscation(ctx context.Context) ([]TransactionPayment, error) {
	rows, err := q.db.Query(ctx, listPaymentTranscation)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TransactionPayment{}
	for rows.Next() {
		var i TransactionPayment
		if err := rows.Scan(
			&i.TransactionID,
			&i.Amount,
			&i.LineID,
			&i.ShippingMethodID,
			&i.CardNumber,
			&i.ExpirationDate,
			&i.Cvv,
			&i.Status,
			&i.CustomerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
